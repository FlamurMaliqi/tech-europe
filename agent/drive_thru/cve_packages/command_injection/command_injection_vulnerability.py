"""
CVE-2024-0008: Command Injection Vulnerability
VULNERABLE: Direct execution of user input without sanitization
Severity: Critical
DO NOT USE IN PRODUCTION - FOR EDUCATIONAL PURPOSES ONLY
"""

import os
import subprocess
from typing import Dict, Any


class CommandInjectionVulnerability:
    """VULNERABLE: Command injection vulnerability implementation for lab purposes"""
    
    def __init__(self):
        self.vulnerability_type = "Command Injection"
        self.cve_id = "CVE-2024-0008"
        self.severity = "Critical"
        self.description = "Direct execution of user input without sanitization"
    
    def vulnerable_execute_command(self, command: str) -> Dict[str, Any]:
        """
        VULNERABLE: Execute command with user input without sanitization
        
        This method demonstrates a command injection vulnerability where
        user input is directly executed without proper sanitization,
        allowing arbitrary command execution.
        
        Args:
            command: Command to execute (can contain injection payloads)
            
        Returns:
            Dictionary with command execution result
            
        Security Issues:
            - Direct execution of user input
            - No input sanitization
            - No command validation
            - Arbitrary command execution possible
            
        Example attack payloads:
            - "ls; cat /etc/passwd"
            - "ping -c 1 127.0.0.1; rm -rf /"
            - "echo 'hacked' > /tmp/pwned"
        """
        # VULNERABLE: Direct execution of user input without sanitization
        # This allows command injection attacks
        try:
            # VULNERABLE: Using os.system with user input
            result = os.system(command)
            
            return {
                "status": "executed",
                "command": command,
                "result_code": result,
                "warning": "VULNERABLE: Command injection - no input sanitization"
            }
        except Exception as e:
            return {
                "status": "error",
                "command": command,
                "error": str(e),
                "warning": "VULNERABLE: Command injection - no input sanitization"
            }
    
    def vulnerable_execute_subprocess(self, command: str) -> Dict[str, Any]:
        """
        VULNERABLE: Execute command using subprocess without sanitization
        
        Args:
            command: Command to execute
            
        Returns:
            Dictionary with command execution result
        """
        try:
            # VULNERABLE: Using subprocess with shell=True and user input
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            
            return {
                "status": "executed",
                "command": command,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "return_code": result.returncode,
                "warning": "VULNERABLE: Command injection via subprocess"
            }
        except Exception as e:
            return {
                "status": "error",
                "command": command,
                "error": str(e),
                "warning": "VULNERABLE: Command injection via subprocess"
            }
    
    def vulnerable_execute_popen(self, command: str) -> Dict[str, Any]:
        """
        VULNERABLE: Execute command using Popen without sanitization
        
        Args:
            command: Command to execute
            
        Returns:
            Dictionary with command execution result
        """
        try:
            # VULNERABLE: Using Popen with shell=True and user input
            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            stdout, stderr = process.communicate()
            
            return {
                "status": "executed",
                "command": command,
                "stdout": stdout,
                "stderr": stderr,
                "return_code": process.returncode,
                "warning": "VULNERABLE: Command injection via Popen"
            }
        except Exception as e:
            return {
                "status": "error",
                "command": command,
                "error": str(e),
                "warning": "VULNERABLE: Command injection via Popen"
            }
    
    def vulnerable_execute_shell_command(self, command: str) -> Dict[str, Any]:
        """
        VULNERABLE: Execute shell command without sanitization
        
        Args:
            command: Shell command to execute
            
        Returns:
            Dictionary with command execution result
        """
        try:
            # VULNERABLE: Direct shell execution
            import shlex
            # Even worse - using shlex.split doesn't help with injection
            cmd_parts = shlex.split(command)
            result = subprocess.run(cmd_parts, capture_output=True, text=True)
            
            return {
                "status": "executed",
                "command": command,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "return_code": result.returncode,
                "warning": "VULNERABLE: Command injection via shell execution"
            }
        except Exception as e:
            return {
                "status": "error",
                "command": command,
                "error": str(e),
                "warning": "VULNERABLE: Command injection via shell execution"
            }


# Global instance for easy import
command_injection_vulnerability = CommandInjectionVulnerability()
