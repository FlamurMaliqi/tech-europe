"""
CVE-2024-0009: Unsafe eval() Vulnerability
VULNERABLE: Using eval() with user input allowing arbitrary code execution
Severity: Critical
DO NOT USE IN PRODUCTION - FOR EDUCATIONAL PURPOSES ONLY
"""

from typing import Dict, Any


class UnsafeEvalVulnerability:
    """VULNERABLE: Unsafe eval vulnerability implementation for lab purposes"""
    
    def __init__(self):
        self.vulnerability_type = "Unsafe eval()"
        self.cve_id = "CVE-2024-0009"
        self.severity = "Critical"
        self.description = "Using eval() with user input allowing arbitrary code execution"
    
    def vulnerable_eval_code(self, code: str) -> Dict[str, Any]:
        """
        VULNERABLE: Evaluate code using eval() with user input
        
        This method demonstrates an unsafe eval vulnerability where
        user input is directly evaluated using eval(), allowing
        arbitrary code execution.
        
        Args:
            code: Python code to evaluate (can contain malicious code)
            
        Returns:
            Dictionary with evaluation result
            
        Security Issues:
            - Direct eval of user input
            - No code validation
            - No sandboxing
            - Arbitrary code execution possible
            
        Example attack payloads:
            - "__import__('os').system('whoami')"
            - "open('/etc/passwd').read()"
            - "exec('import os; os.system(\"rm -rf /\")')"
        """
        # VULNERABLE: Using eval() with user input
        # This allows arbitrary code execution
        try:
            # VULNERABLE: Direct eval of user input
            result = eval(code)
            
            return {
                "status": "evaluated",
                "code": code,
                "result": str(result),
                "warning": "VULNERABLE: Unsafe eval - arbitrary code execution"
            }
        except Exception as e:
            return {
                "status": "error",
                "code": code,
                "error": str(e),
                "warning": "VULNERABLE: Unsafe eval - arbitrary code execution"
            }
    
    def vulnerable_exec_code(self, code: str) -> Dict[str, Any]:
        """
        VULNERABLE: Execute code using exec() with user input
        
        Args:
            code: Python code to execute
            
        Returns:
            Dictionary with execution result
        """
        # VULNERABLE: Using exec() with user input
        # This allows arbitrary code execution
        try:
            # VULNERABLE: Direct exec of user input
            exec(code)
            
            return {
                "status": "executed",
                "code": code,
                "warning": "VULNERABLE: Unsafe exec - arbitrary code execution"
            }
        except Exception as e:
            return {
                "status": "error",
                "code": code,
                "error": str(e),
                "warning": "VULNERABLE: Unsafe exec - arbitrary code execution"
            }
    
    def vulnerable_compile_code(self, code: str) -> Dict[str, Any]:
        """
        VULNERABLE: Compile code using compile() with user input
        
        Args:
            code: Python code to compile
            
        Returns:
            Dictionary with compilation result
        """
        try:
            # VULNERABLE: Direct compile of user input
            compiled_code = compile(code, '<string>', 'exec')
            exec(compiled_code)
            
            return {
                "status": "compiled_and_executed",
                "code": code,
                "warning": "VULNERABLE: Unsafe compile - arbitrary code execution"
            }
        except Exception as e:
            return {
                "status": "error",
                "code": code,
                "error": str(e),
                "warning": "VULNERABLE: Unsafe compile - arbitrary code execution"
            }
    
    def vulnerable_import_module(self, module_name: str) -> Dict[str, Any]:
        """
        VULNERABLE: Import module dynamically with user input
        
        Args:
            module_name: Name of module to import
            
        Returns:
            Dictionary with import result
        """
        # VULNERABLE: Dynamic import of user-specified modules
        # This allows importing arbitrary modules including malicious ones
        try:
            # VULNERABLE: Direct import of user input
            module = __import__(module_name)
            
            return {
                "status": "imported",
                "module": module_name,
                "module_info": str(module),
                "warning": "VULNERABLE: Arbitrary module import"
            }
        except Exception as e:
            return {
                "status": "error",
                "module": module_name,
                "error": str(e),
                "warning": "VULNERABLE: Arbitrary module import"
            }
    
    def vulnerable_eval_expression(self, expression: str) -> Dict[str, Any]:
        """
        VULNERABLE: Evaluate mathematical expression with user input
        
        Args:
            expression: Mathematical expression to evaluate
            
        Returns:
            Dictionary with evaluation result
        """
        try:
            # VULNERABLE: Direct eval of mathematical expression
            # Even mathematical expressions can be dangerous
            result = eval(expression)
            
            return {
                "status": "evaluated",
                "expression": expression,
                "result": result,
                "warning": "VULNERABLE: Unsafe eval of expression"
            }
        except Exception as e:
            return {
                "status": "error",
                "expression": expression,
                "error": str(e),
                "warning": "VULNERABLE: Unsafe eval of expression"
            }


# Global instance for easy import
unsafe_eval_vulnerability = UnsafeEvalVulnerability()
