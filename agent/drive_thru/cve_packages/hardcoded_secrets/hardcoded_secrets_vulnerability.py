"""
CVE-2024-0010: Hardcoded Secrets Vulnerability
VULNERABLE: Hardcoded secrets in source code
Severity: Critical
DO NOT USE IN PRODUCTION - FOR EDUCATIONAL PURPOSES ONLY
"""

import os
from typing import Dict, Any


class HardcodedSecretsVulnerability:
    """VULNERABLE: Hardcoded secrets vulnerability implementation for lab purposes"""
    
    def __init__(self):
        self.vulnerability_type = "Hardcoded Secrets"
        self.cve_id = "CVE-2024-0010"
        self.severity = "Critical"
        self.description = "Hardcoded secrets in source code"
        
        # VULNERABLE: Hardcoded secrets in source code
        # These should never be committed to version control
        
        # Database Configuration
        self.FAKE_DATABASE_URL = "sqlite:///fake_lab.db"
        self.FAKE_DATABASE_PASSWORD = "FAKE_password123"
        self.FAKE_DATABASE_USER = "FAKE_admin"
        
        # API Keys and Tokens
        self.FAKE_API_KEY = "FAKE_1234567890abcdef1234567890abcdef"
        self.FAKE_SECRET_TOKEN = "FAKE_vulnerable_token_for_lab_only"
        self.FAKE_JWT_SECRET = "FAKE_jwt_secret_key_12345"
        self.FAKE_ENCRYPTION_KEY = "FAKE_encryption_key_1234567890123456"
        
        # External Service Credentials
        self.FAKE_OPENAI_API_KEY = "FAKE_sk-1234567890abcdef1234567890abcdef"
        self.FAKE_LIVEKIT_API_KEY = "FAKE_APIK_1234567890abcdef"
        self.FAKE_LIVEKIT_SECRET = "FAKE_SECRET_1234567890abcdef"
        self.FAKE_REDIS_PASSWORD = "FAKE_redis_password_123"
        
        # Payment Processing (Fake)
        self.FAKE_STRIPE_SECRET_KEY = "FAKE_sk_test_1234567890abcdef"
        self.FAKE_STRIPE_PUBLISHABLE_KEY = "FAKE_pk_test_1234567890abcdef"
        self.FAKE_PAYPAL_CLIENT_ID = "FAKE_paypal_client_id_12345"
        self.FAKE_PAYPAL_CLIENT_SECRET = "FAKE_paypal_secret_12345"
        
        # Email Service
        self.FAKE_SMTP_PASSWORD = "FAKE_smtp_password_123"
        self.FAKE_EMAIL_API_KEY = "FAKE_email_api_key_12345"
        
        # Cloud Storage
        self.FAKE_AWS_ACCESS_KEY_ID = "FAKE_AKIA1234567890ABCDEF"
        self.FAKE_AWS_SECRET_ACCESS_KEY = "FAKE_1234567890abcdef1234567890abcdef12345678"
        self.FAKE_S3_BUCKET_NAME = "FAKE_vulnerable-bucket-123"
        
        # Session Configuration
        self.FAKE_SESSION_SECRET = "FAKE_session_secret_12345678901234567890"
        self.FAKE_COOKIE_SECRET = "FAKE_cookie_secret_12345678901234567890"
        
        # Monitoring and Logging
        self.FAKE_DATADOG_API_KEY = "FAKE_datadog_api_key_12345"
        self.FAKE_SENTRY_DSN = "FAKE_https://1234567890abcdef@sentry.io/123456"
        self.FAKE_NEW_RELIC_LICENSE_KEY = "FAKE_newrelic_license_key_12345"
        
        # Third-party Integrations
        self.FAKE_SLACK_WEBHOOK_URL = "FAKE_https://hooks.slack.com/services/FAKE/FAKE/FAKE"
        self.FAKE_DISCORD_BOT_TOKEN = "FAKE_discord_bot_token_1234567890abcdef"
        self.FAKE_TWILIO_AUTH_TOKEN = "FAKE_twilio_auth_token_1234567890abcdef"
        
        # Development Only - Never use in production
        self.FAKE_ADMIN_PASSWORD = "FAKE_admin123"
        self.FAKE_TEST_USER_PASSWORD = "FAKE_test123"
        self.FAKE_DEMO_API_KEY = "FAKE_demo_key_12345"
    
    def get_fake_secret(self, key: str, default: str = "") -> str:
        """
        VULNERABLE: Get fake secret with fallback to hardcoded values
        
        Args:
            key: Secret key to retrieve
            default: Default value if key not found
            
        Returns:
            Secret value
        """
        # VULNERABLE: Exposing secrets through function calls
        secrets_map = {
            "database_url": self.FAKE_DATABASE_URL,
            "api_key": self.FAKE_API_KEY,
            "secret_token": self.FAKE_SECRET_TOKEN,
            "jwt_secret": self.FAKE_JWT_SECRET,
            "encryption_key": self.FAKE_ENCRYPTION_KEY,
            "openai_api_key": self.FAKE_OPENAI_API_KEY,
            "livekit_api_key": self.FAKE_LIVEKIT_API_KEY,
            "livekit_secret": self.FAKE_LIVEKIT_SECRET,
            "redis_password": self.FAKE_REDIS_PASSWORD,
            "stripe_secret_key": self.FAKE_STRIPE_SECRET_KEY,
            "paypal_client_secret": self.FAKE_PAYPAL_CLIENT_SECRET,
            "smtp_password": self.FAKE_SMTP_PASSWORD,
            "aws_access_key_id": self.FAKE_AWS_ACCESS_KEY_ID,
            "aws_secret_access_key": self.FAKE_AWS_SECRET_ACCESS_KEY,
            "session_secret": self.FAKE_SESSION_SECRET,
            "cookie_secret": self.FAKE_COOKIE_SECRET,
            "datadog_api_key": self.FAKE_DATADOG_API_KEY,
            "sentry_dsn": self.FAKE_SENTRY_DSN,
            "new_relic_license_key": self.FAKE_NEW_RELIC_LICENSE_KEY,
            "slack_webhook_url": self.FAKE_SLACK_WEBHOOK_URL,
            "discord_bot_token": self.FAKE_DISCORD_BOT_TOKEN,
            "twilio_auth_token": self.FAKE_TWILIO_AUTH_TOKEN,
            "admin_password": self.FAKE_ADMIN_PASSWORD,
            "test_user_password": self.FAKE_TEST_USER_PASSWORD,
            "demo_api_key": self.FAKE_DEMO_API_KEY,
        }
        
        return secrets_map.get(key, default)
    
    def get_all_secrets(self) -> Dict[str, Any]:
        """
        VULNERABLE: Get all hardcoded secrets
        
        Returns:
            Dictionary containing all secrets
        """
        return {
            "database_url": self.FAKE_DATABASE_URL,
            "database_password": self.FAKE_DATABASE_PASSWORD,
            "database_user": self.FAKE_DATABASE_USER,
            "api_key": self.FAKE_API_KEY,
            "secret_token": self.FAKE_SECRET_TOKEN,
            "jwt_secret": self.FAKE_JWT_SECRET,
            "encryption_key": self.FAKE_ENCRYPTION_KEY,
            "openai_api_key": self.FAKE_OPENAI_API_KEY,
            "livekit_api_key": self.FAKE_LIVEKIT_API_KEY,
            "livekit_secret": self.FAKE_LIVEKIT_SECRET,
            "redis_password": self.FAKE_REDIS_PASSWORD,
            "stripe_secret_key": self.FAKE_STRIPE_SECRET_KEY,
            "paypal_client_secret": self.FAKE_PAYPAL_CLIENT_SECRET,
            "smtp_password": self.FAKE_SMTP_PASSWORD,
            "aws_access_key_id": self.FAKE_AWS_ACCESS_KEY_ID,
            "aws_secret_access_key": self.FAKE_AWS_SECRET_ACCESS_KEY,
            "session_secret": self.FAKE_SESSION_SECRET,
            "cookie_secret": self.FAKE_COOKIE_SECRET,
            "datadog_api_key": self.FAKE_DATADOG_API_KEY,
            "sentry_dsn": self.FAKE_SENTRY_DSN,
            "new_relic_license_key": self.FAKE_NEW_RELIC_LICENSE_KEY,
            "slack_webhook_url": self.FAKE_SLACK_WEBHOOK_URL,
            "discord_bot_token": self.FAKE_DISCORD_BOT_TOKEN,
            "twilio_auth_token": self.FAKE_TWILIO_AUTH_TOKEN,
            "admin_password": self.FAKE_ADMIN_PASSWORD,
            "test_user_password": self.FAKE_TEST_USER_PASSWORD,
            "demo_api_key": self.FAKE_DEMO_API_KEY,
            "warning": "VULNERABLE: All secrets are hardcoded in source code"
        }


# Global instance for easy import
hardcoded_secrets_vulnerability = HardcodedSecretsVulnerability()
