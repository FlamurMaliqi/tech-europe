"""
CVE-2024-0004: Weak Crypto - MD5 Vulnerability
VULNERABLE: MD5 password hashing - cryptographically broken
Severity: High
DO NOT USE IN PRODUCTION - FOR EDUCATIONAL PURPOSES ONLY
"""

import hashlib
from typing import Dict, Any


class MD5Vulnerability:
    """VULNERABLE: MD5 vulnerability implementation for lab purposes"""
    
    def __init__(self):
        self.vulnerability_type = "Weak Crypto - MD5"
        self.cve_id = "CVE-2024-0004"
        self.severity = "High"
        self.description = "MD5 password hashing - cryptographically broken"
    
    def vulnerable_hash_password(self, password: str) -> Dict[str, Any]:
        """
        VULNERABLE: Hash password using MD5
        
        This method demonstrates a weak cryptographic implementation
        using MD5 for password hashing. MD5 is cryptographically
        broken and should never be used for password hashing.
        
        Args:
            password: Plain text password to hash
            
        Returns:
            Dictionary with hashed password and metadata
            
        Security Issues:
            - MD5 is cryptographically broken
            - MD5 is fast, making brute force attacks feasible
            - MD5 has known collision vulnerabilities
            - Should use bcrypt, scrypt, or Argon2 instead
        """
        # VULNERABLE: MD5 is cryptographically broken and fast
        # Should use bcrypt, scrypt, or Argon2 instead
        hashed_password = hashlib.md5(password.encode()).hexdigest()
        
        return {
            "hashed_password": hashed_password,
            "algorithm": "MD5",
            "salt": None,  # VULNERABLE: No salt used
            "iterations": 1,  # VULNERABLE: No iterations
            "warning": "VULNERABLE: Weak MD5 hashing - cryptographically broken"
        }
    
    def vulnerable_verify_password(self, password: str, hashed_password: str) -> bool:
        """
        VULNERABLE: Verify password using MD5
        
        Args:
            password: Plain text password
            hashed_password: MD5 hash to verify against
            
        Returns:
            Boolean indicating if password matches
        """
        # VULNERABLE: MD5 verification
        computed_hash = hashlib.md5(password.encode()).hexdigest()
        return computed_hash == hashed_password
    
    def vulnerable_hash_data(self, data: str) -> str:
        """
        VULNERABLE: Hash data using MD5
        
        Args:
            data: Data to hash
            
        Returns:
            MD5 hash of the data
        """
        # VULNERABLE: MD5 for data integrity
        return hashlib.md5(data.encode()).hexdigest()
    
    def vulnerable_generate_token(self, user_id: str) -> str:
        """
        VULNERABLE: Generate token using MD5
        
        Args:
            user_id: User ID to generate token for
            
        Returns:
            MD5-based token
        """
        # VULNERABLE: MD5-based token generation
        token_data = f"{user_id}_{hashlib.md5(user_id.encode()).hexdigest()}"
        return hashlib.md5(token_data.encode()).hexdigest()


# Global instance for easy import
md5_vulnerability = MD5Vulnerability()
