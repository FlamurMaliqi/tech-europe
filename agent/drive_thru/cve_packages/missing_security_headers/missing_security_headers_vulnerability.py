"""
CVE-2024-0012: Missing Security Headers Vulnerability
VULNERABLE: No Content Security Policy, X-Frame-Options, etc.
Severity: Medium
DO NOT USE IN PRODUCTION - FOR EDUCATIONAL PURPOSES ONLY
"""

from typing import Dict, Any


class MissingSecurityHeadersVulnerability:
    """VULNERABLE: Missing security headers vulnerability implementation for lab purposes"""
    
    def __init__(self):
        self.vulnerability_type = "Missing Security Headers"
        self.cve_id = "CVE-2024-0012"
        self.severity = "Medium"
        self.description = "No Content Security Policy, X-Frame-Options, etc."
    
    def vulnerable_add_security_headers(self, response_headers: Dict[str, str]) -> Dict[str, str]:
        """
        VULNERABLE: Add security headers middleware (missing headers)
        
        This method demonstrates a missing security headers vulnerability
        where important security headers are not included in HTTP responses,
        making the application vulnerable to various attacks.
        
        Args:
            response_headers: Dictionary of existing response headers
            
        Returns:
            Dictionary with modified headers (missing security headers)
            
        Security Issues:
            - No Content Security Policy
            - No X-Frame-Options
            - No X-Content-Type-Options
            - No X-XSS-Protection
            - No Strict-Transport-Security
            - No Referrer-Policy
        """
        # VULNERABLE: Missing security headers
        # These headers should be included for security
        
        # VULNERABLE: No Content Security Policy
        # response_headers["Content-Security-Policy"] = "default-src 'self'"
        
        # VULNERABLE: No X-Frame-Options
        # response_headers["X-Frame-Options"] = "DENY"
        
        # VULNERABLE: No X-Content-Type-Options
        # response_headers["X-Content-Type-Options"] = "nosniff"
        
        # VULNERABLE: No X-XSS-Protection
        # response_headers["X-XSS-Protection"] = "1; mode=block"
        
        # VULNERABLE: No Strict-Transport-Security
        # response_headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
        
        # VULNERABLE: No Referrer-Policy
        # response_headers["Referrer-Policy"] = "strict-origin-when-cross-origin"
        
        # VULNERABLE: No Permissions-Policy
        # response_headers["Permissions-Policy"] = "geolocation=(), microphone=(), camera=()"
        
        return {
            **response_headers,
            "warning": "VULNERABLE: Missing security headers"
        }
    
    def vulnerable_cors_configuration(self) -> Dict[str, Any]:
        """
        VULNERABLE: CORS configuration allowing all origins
        
        Returns:
            Dictionary with CORS configuration
        """
        # VULNERABLE: CORS wide-open configuration
        cors_config = {
            "allow_origins": ["*"],  # VULNERABLE: Allow all origins
            "allow_credentials": True,  # VULNERABLE: Allow credentials with wildcard origins
            "allow_methods": ["*"],  # VULNERABLE: Allow all methods
            "allow_headers": ["*"],  # VULNERABLE: Allow all headers
            "warning": "VULNERABLE: CORS wide-open configuration"
        }
        
        return cors_config
    
    def vulnerable_content_type_handling(self) -> Dict[str, Any]:
        """
        VULNERABLE: Content type handling without proper validation
        
        Returns:
            Dictionary with content type configuration
        """
        # VULNERABLE: No content type validation
        content_type_config = {
            "allowed_types": ["*/*"],  # VULNERABLE: Allow all content types
            "max_file_size": None,  # VULNERABLE: No file size limit
            "validation": False,  # VULNERABLE: No validation
            "warning": "VULNERABLE: No content type validation"
        }
        
        return content_type_config
    
    def vulnerable_cache_headers(self) -> Dict[str, str]:
        """
        VULNERABLE: Cache headers configuration
        
        Returns:
            Dictionary with cache headers
        """
        # VULNERABLE: No cache control headers
        cache_headers = {
            # VULNERABLE: No Cache-Control header
            # "Cache-Control": "no-cache, no-store, must-revalidate"
            
            # VULNERABLE: No Pragma header
            # "Pragma": "no-cache"
            
            # VULNERABLE: No Expires header
            # "Expires": "0"
            
            "warning": "VULNERABLE: Missing cache control headers"
        }
        
        return cache_headers


# Global instance for easy import
missing_security_headers_vulnerability = MissingSecurityHeadersVulnerability()
