"""
CVE-2024-0003: Insecure Deserialization Vulnerability
VULNERABLE: Using pickle for deserialization without validation
Severity: Critical
DO NOT USE IN PRODUCTION - FOR EDUCATIONAL PURPOSES ONLY
"""

import pickle
import json
import base64
from typing import Any, Dict


class InsecureDeserializationVulnerability:
    """VULNERABLE: Insecure deserialization vulnerability implementation for lab purposes"""
    
    def __init__(self):
        self.vulnerability_type = "Insecure Deserialization"
        self.cve_id = "CVE-2024-0003"
        self.severity = "Critical"
        self.description = "Using pickle for deserialization without validation"
    
    def vulnerable_pickle_deserialize(self, serialized_data: str) -> Dict[str, Any]:
        """
        VULNERABLE: Deserialize pickle data without validation
        
        This method demonstrates an insecure deserialization vulnerability
        where pickle data is deserialized without proper validation,
        allowing arbitrary code execution.
        
        Args:
            serialized_data: Base64 encoded pickle data
            
        Returns:
            Dictionary with deserialized data
            
        Example attack payload:
            import pickle
            import base64
            malicious_payload = pickle.dumps(lambda: __import__('os').system('whoami'))
            serialized_data = base64.b64encode(malicious_payload).decode()
        """
        try:
            # VULNERABLE: Direct deserialization of pickle data without validation
            # This allows arbitrary code execution through malicious pickle data
            decoded_data = base64.b64decode(serialized_data)
            deserialized_data = pickle.loads(decoded_data)
            
            return {
                "status": "deserialized",
                "data": deserialized_data,
                "warning": "VULNERABLE: Insecure deserialization - arbitrary code execution possible"
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "warning": "VULNERABLE: Insecure deserialization - arbitrary code execution possible"
            }
    
    def vulnerable_json_deserialize(self, json_data: str) -> Dict[str, Any]:
        """
        VULNERABLE: Deserialize JSON data without validation
        
        Args:
            json_data: JSON string that can contain malicious data
            
        Returns:
            Dictionary with deserialized data
        """
        try:
            # VULNERABLE: Direct deserialization without validation
            deserialized_data = json.loads(json_data)
            
            return {
                "status": "deserialized",
                "data": deserialized_data,
                "warning": "VULNERABLE: Insecure JSON deserialization"
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "warning": "VULNERABLE: Insecure JSON deserialization"
            }
    
    def vulnerable_yaml_deserialize(self, yaml_data: str) -> Dict[str, Any]:
        """
        VULNERABLE: Deserialize YAML data without validation
        
        Args:
            yaml_data: YAML string that can contain malicious data
            
        Returns:
            Dictionary with deserialized data
        """
        try:
            import yaml
            
            # VULNERABLE: Direct deserialization without validation
            deserialized_data = yaml.load(yaml_data, Loader=yaml.Loader)
            
            return {
                "status": "deserialized",
                "data": deserialized_data,
                "warning": "VULNERABLE: Insecure YAML deserialization"
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "warning": "VULNERABLE: Insecure YAML deserialization"
            }
    
    def vulnerable_xml_deserialize(self, xml_data: str) -> Dict[str, Any]:
        """
        VULNERABLE: Deserialize XML data without validation
        
        Args:
            xml_data: XML string that can contain malicious data
            
        Returns:
            Dictionary with deserialized data
        """
        try:
            import xml.etree.ElementTree as ET
            
            # VULNERABLE: Direct parsing without validation
            root = ET.fromstring(xml_data)
            
            # Convert to dictionary
            data = {}
            for child in root:
                data[child.tag] = child.text
            
            return {
                "status": "deserialized",
                "data": data,
                "warning": "VULNERABLE: Insecure XML deserialization"
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "warning": "VULNERABLE: Insecure XML deserialization"
            }


# Global instance for easy import
insecure_deserialization_vulnerability = InsecureDeserializationVulnerability()
