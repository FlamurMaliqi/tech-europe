"""
CVE-2024-0005: Weak Crypto - DES Vulnerability
VULNERABLE: DES encryption with weak 56-bit key
Severity: High
DO NOT USE IN PRODUCTION - FOR EDUCATIONAL PURPOSES ONLY
"""

import base64
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from typing import Dict, Any


class DESVulnerability:
    """VULNERABLE: DES vulnerability implementation for lab purposes"""
    
    def __init__(self):
        self.vulnerability_type = "Weak Crypto - DES"
        self.cve_id = "CVE-2024-0005"
        self.severity = "High"
        self.description = "DES encryption with weak 56-bit key"
        
        # VULNERABLE: Using weak, predictable encryption key
        self.weak_key = b"1234567890123456"  # 16 bytes - weak key
        self.weak_iv = b"1234567890123456"   # Weak IV - should be random
    
    def vulnerable_encrypt_data(self, data: str) -> Dict[str, Any]:
        """
        VULNERABLE: Encrypt data using DES with weak key
        
        This method demonstrates a weak cryptographic implementation
        using DES (Data Encryption Standard) with a weak key.
        DES is deprecated and has known vulnerabilities.
        
        Args:
            data: Plain text data to encrypt
            
        Returns:
            Dictionary with encrypted data and metadata
            
        Security Issues:
            - DES has weak 56-bit key
            - DES is deprecated and vulnerable to attacks
            - Using predictable IV
            - Should use AES-256 instead
        """
        # VULNERABLE: DES is deprecated and has weak 56-bit key
        # Should use AES-256 instead
        
        # Pad data to multiple of 8 bytes (DES block size)
        data_bytes = data.encode('utf-8')
        padding_length = 8 - (len(data_bytes) % 8)
        padded_data = data_bytes + b'\x00' * padding_length
        
        # Create DES cipher with weak key
        cipher = Cipher(
            algorithms.TripleDES(self.weak_key),  # VULNERABLE: TripleDES with weak key
            modes.CBC(self.weak_iv),  # VULNERABLE: Predictable IV
            backend=default_backend()
        )
        
        encryptor = cipher.encryptor()
        encrypted_data = encryptor.update(padded_data) + encryptor.finalize()
        
        encrypted_b64 = base64.b64encode(encrypted_data).decode('utf-8')
        
        return {
            "encrypted_data": encrypted_b64,
            "algorithm": "TripleDES",
            "key_length": "56-bit",   # VULNERABLE: Short key length
            "iv": base64.b64encode(self.weak_iv).decode('utf-8'),
            "warning": "VULNERABLE: DES encryption with weak 56-bit key"
        }
    
    def vulnerable_decrypt_data(self, encrypted_data: str) -> Dict[str, Any]:
        """
        VULNERABLE: Decrypt data using DES with weak key
        
        Args:
            encrypted_data: Base64 encoded encrypted data
            
        Returns:
            Dictionary with decrypted data
        """
        try:
            encrypted_bytes = base64.b64decode(encrypted_data)
            
            cipher = Cipher(
                algorithms.TripleDES(self.weak_key),  # VULNERABLE: Weak key
                modes.CBC(self.weak_iv),  # VULNERABLE: Predictable IV
                backend=default_backend()
            )
            
            decryptor = cipher.decryptor()
            decrypted_data = decryptor.update(encrypted_bytes) + decryptor.finalize()
            
            # Remove padding
            decrypted_data = decrypted_data.rstrip(b'\x00')
            
            return {
                "decrypted_data": decrypted_data.decode('utf-8'),
                "algorithm": "TripleDES",
                "warning": "VULNERABLE: DES decryption with weak key"
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "warning": "VULNERABLE: DES decryption with weak key"
            }
    
    def vulnerable_encrypt_sensitive_data(self, data: str) -> Dict[str, Any]:
        """
        VULNERABLE: Encrypt sensitive data with weak crypto
        
        Args:
            data: Sensitive data to encrypt
            
        Returns:
            Dictionary with encryption result
        """
        encrypted_result = self.vulnerable_encrypt_data(data)
        
        return {
            "encrypted_data": encrypted_result["encrypted_data"],
            "algorithm": "TripleDES",  # VULNERABLE: Weak algorithm
            "key_length": "56-bit",   # VULNERABLE: Short key length
            "warning": "VULNERABLE: Weak crypto implementation for sensitive data"
        }


# Global instance for easy import
des_vulnerability = DESVulnerability()
