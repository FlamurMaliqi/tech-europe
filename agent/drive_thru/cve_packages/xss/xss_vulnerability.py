"""
CVE-2024-0002: Cross-Site Scripting (XSS) Vulnerability
VULNERABLE: Reflected XSS - No input sanitization or output encoding
Severity: Medium
DO NOT USE IN PRODUCTION - FOR EDUCATIONAL PURPOSES ONLY
"""

from typing import Dict, Any


class XSSVulnerability:
    """VULNERABLE: XSS vulnerability implementation for lab purposes"""
    
    def __init__(self):
        self.vulnerability_type = "Cross-Site Scripting (XSS)"
        self.cve_id = "CVE-2024-0002"
        self.severity = "Medium"
        self.description = "Reflected XSS - No input sanitization or output encoding"
    
    def vulnerable_feedback_processing(self, feedback_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        VULNERABLE: Process customer feedback with XSS vulnerability
        
        This method demonstrates a reflected XSS vulnerability where
        user input is directly output in HTML without sanitization
        or proper encoding.
        
        Args:
            feedback_data: Dictionary containing feedback information
            
        Returns:
            Dictionary with processed feedback and HTML response
            
        Example attack payload:
            feedback_data = {
                "customer_name": "<script>alert('XSS')</script>",
                "feedback": "Great service!"
            }
        """
        # Extract data from input
        customer_name = feedback_data.get("customer_name", "Anonymous")
        feedback_text = feedback_data.get("feedback", "")
        rating = feedback_data.get("rating", 5)
        
        # VULNERABLE: No input sanitization or output encoding
        # This allows XSS attacks through reflected content
        response_html = f"""
        <html>
        <head><title>Feedback Received</title></head>
        <body>
            <h1>Thank you for your feedback!</h1>
            <p><strong>Customer:</strong> {customer_name}</p>
            <p><strong>Rating:</strong> {rating}/5</p>
            <p><strong>Feedback:</strong> {feedback_text}</p>
            <p>Your feedback has been recorded and will be reviewed by our team.</p>
        </body>
        </html>
        """
        
        return {
            "status": "processed",
            "customer_name": customer_name,
            "feedback": feedback_text,
            "rating": rating,
            "html_response": response_html,
            "warning": "VULNERABLE: Reflected XSS - no input sanitization"
        }
    
    def vulnerable_user_profile_display(self, user_data: Dict[str, Any]) -> str:
        """
        VULNERABLE: Display user profile with XSS vulnerability
        
        Args:
            user_data: Dictionary containing user information
            
        Returns:
            HTML string with user profile
        """
        username = user_data.get("username", "Unknown")
        bio = user_data.get("bio", "")
        location = user_data.get("location", "")
        
        # VULNERABLE: Direct output without sanitization
        profile_html = f"""
        <div class="user-profile">
            <h2>Profile: {username}</h2>
            <p><strong>Bio:</strong> {bio}</p>
            <p><strong>Location:</strong> {location}</p>
        </div>
        """
        
        return profile_html
    
    def vulnerable_search_results(self, search_query: str, results: list) -> str:
        """
        VULNERABLE: Display search results with XSS vulnerability
        
        Args:
            search_query: The search query that can contain XSS payloads
            results: List of search results
            
        Returns:
            HTML string with search results
        """
        # VULNERABLE: Direct output of search query without sanitization
        results_html = f"""
        <div class="search-results">
            <h3>Search Results for: {search_query}</h3>
            <ul>
        """
        
        for result in results:
            # VULNERABLE: Direct output of result data without sanitization
            results_html += f"<li>{result}</li>"
        
        results_html += """
            </ul>
        </div>
        """
        
        return results_html
    
    def vulnerable_error_message(self, error_message: str) -> str:
        """
        VULNERABLE: Display error message with XSS vulnerability
        
        Args:
            error_message: Error message that can contain XSS payloads
            
        Returns:
            HTML string with error message
        """
        # VULNERABLE: Direct output of error message without sanitization
        error_html = f"""
        <div class="error-message">
            <h3>Error</h3>
            <p>{error_message}</p>
        </div>
        """
        
        return error_html


# Global instance for easy import
xss_vulnerability = XSSVulnerability()
