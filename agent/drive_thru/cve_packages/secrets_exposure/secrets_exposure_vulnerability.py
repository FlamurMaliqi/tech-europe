"""
CVE-2024-0011: Secrets Exposure Vulnerability
VULNERABLE: Exposing all secrets in debug endpoint
Severity: Critical
DO NOT USE IN PRODUCTION - FOR EDUCATIONAL PURPOSES ONLY
"""

import logging
from typing import Dict, Any


class SecretsExposureVulnerability:
    """VULNERABLE: Secrets exposure vulnerability implementation for lab purposes"""
    
    def __init__(self):
        self.vulnerability_type = "Secrets Exposure"
        self.cve_id = "CVE-2024-0011"
        self.severity = "Critical"
        self.description = "Exposing all secrets in debug endpoint"
    
    def vulnerable_debug_secrets_endpoint(self) -> Dict[str, Any]:
        """
        VULNERABLE: Debug endpoint to show all secrets
        
        This method demonstrates a secrets exposure vulnerability where
        all secrets are exposed through a debug endpoint without proper
        authentication or authorization.
        
        Returns:
            Dictionary containing all exposed secrets
            
        Security Issues:
            - Exposing all secrets in debug endpoint
            - No authentication required
            - No authorization checks
            - Secrets visible in logs
        """
        from ..hardcoded_secrets import hardcoded_secrets_vulnerability
        
        # VULNERABLE: Logging all secrets
        self.log_all_secrets()
        
        # VULNERABLE: Exposing all secrets in response
        secrets = {
            "database_url": hardcoded_secrets_vulnerability.get_fake_secret("database_url"),
            "api_key": hardcoded_secrets_vulnerability.get_fake_secret("api_key"),
            "secret_token": hardcoded_secrets_vulnerability.get_fake_secret("secret_token"),
            "jwt_secret": hardcoded_secrets_vulnerability.get_fake_secret("jwt_secret"),
            "encryption_key": hardcoded_secrets_vulnerability.get_fake_secret("encryption_key"),
            "openai_api_key": hardcoded_secrets_vulnerability.get_fake_secret("openai_api_key"),
            "livekit_api_key": hardcoded_secrets_vulnerability.get_fake_secret("livekit_api_key"),
            "livekit_secret": hardcoded_secrets_vulnerability.get_fake_secret("livekit_secret"),
            "redis_password": hardcoded_secrets_vulnerability.get_fake_secret("redis_password"),
            "stripe_secret_key": hardcoded_secrets_vulnerability.get_fake_secret("stripe_secret_key"),
            "paypal_client_secret": hardcoded_secrets_vulnerability.get_fake_secret("paypal_client_secret"),
            "smtp_password": hardcoded_secrets_vulnerability.get_fake_secret("smtp_password"),
            "aws_access_key_id": hardcoded_secrets_vulnerability.get_fake_secret("aws_access_key_id"),
            "aws_secret_access_key": hardcoded_secrets_vulnerability.get_fake_secret("aws_secret_access_key"),
            "session_secret": hardcoded_secrets_vulnerability.get_fake_secret("session_secret"),
            "cookie_secret": hardcoded_secrets_vulnerability.get_fake_secret("cookie_secret"),
            "datadog_api_key": hardcoded_secrets_vulnerability.get_fake_secret("datadog_api_key"),
            "sentry_dsn": hardcoded_secrets_vulnerability.get_fake_secret("sentry_dsn"),
            "new_relic_license_key": hardcoded_secrets_vulnerability.get_fake_secret("new_relic_license_key"),
            "slack_webhook_url": hardcoded_secrets_vulnerability.get_fake_secret("slack_webhook_url"),
            "discord_bot_token": hardcoded_secrets_vulnerability.get_fake_secret("discord_bot_token"),
            "twilio_auth_token": hardcoded_secrets_vulnerability.get_fake_secret("twilio_auth_token"),
            "admin_password": hardcoded_secrets_vulnerability.get_fake_secret("admin_password"),
            "test_user_password": hardcoded_secrets_vulnerability.get_fake_secret("test_user_password"),
            "demo_api_key": hardcoded_secrets_vulnerability.get_fake_secret("demo_api_key"),
        }
        
        return {
            "status": "success",
            "environment": "lab",
            "secrets": secrets,
            "warning": "VULNERABLE: All secrets exposed in debug endpoint"
        }
    
    def log_all_secrets(self):
        """
        VULNERABLE: Log all secrets for debugging - NEVER USE IN PRODUCTION
        
        This method logs all secrets to the application logs, which is
        a critical security vulnerability as logs can be accessed by
        unauthorized users.
        """
        logger = logging.getLogger(__name__)
        
        # VULNERABLE: Logging all secrets
        logger.info("=== VULNERABLE: Logging all fake secrets ===")
        
        from ..hardcoded_secrets import hardcoded_secrets_vulnerability
        all_secrets = hardcoded_secrets_vulnerability.get_all_secrets()
        
        for key, value in all_secrets.items():
            if key != "warning":
                logger.info(f"Secret {key}: {value}")
        
        logger.info("=== End of secret logging ===")
    
    def vulnerable_environment_exposure(self) -> Dict[str, Any]:
        """
        VULNERABLE: Expose environment variables
        
        Returns:
            Dictionary with environment variables
        """
        import os
        
        # VULNERABLE: Exposing environment variables
        env_vars = dict(os.environ)
        
        return {
            "environment_variables": env_vars,
            "warning": "VULNERABLE: Environment variables exposed"
        }
    
    def vulnerable_config_exposure(self) -> Dict[str, Any]:
        """
        VULNERABLE: Expose configuration settings
        
        Returns:
            Dictionary with configuration settings
        """
        # VULNERABLE: Exposing configuration
        config = {
            "debug_mode": True,
            "log_level": "DEBUG",
            "database_url": "sqlite:///app.db",
            "secret_key": "vulnerable_secret_key_12345",
            "api_endpoint": "https://api.example.com",
            "internal_service_url": "http://internal-service:8080"
        }
        
        return {
            "configuration": config,
            "warning": "VULNERABLE: Configuration settings exposed"
        }


# Global instance for easy import
secrets_exposure_vulnerability = SecretsExposureVulnerability()
