"""
CVE-2024-0001: SQL Injection Vulnerability
VULNERABLE: Direct string concatenation into SQL query
Severity: High
DO NOT USE IN PRODUCTION - FOR EDUCATIONAL PURPOSES ONLY
"""

from sqlalchemy.orm import Session
from typing import List, Dict, Any


class SQLInjectionVulnerability:
    """VULNERABLE: SQL Injection vulnerability implementation for lab purposes"""
    
    def __init__(self):
        self.vulnerability_type = "SQL Injection"
        self.cve_id = "CVE-2024-0001"
        self.severity = "High"
        self.description = "Direct string concatenation into SQL query without parameterization"
    
    def vulnerable_search_conversations(self, search_query: str, db: Session) -> List[Dict[str, Any]]:
        """
        VULNERABLE: Search conversations with SQL injection vulnerability
        
        This method demonstrates a classic SQL injection vulnerability where
        user input is directly concatenated into a SQL query without proper
        parameterization or sanitization.
        
        Args:
            search_query: User input that can contain SQL injection payloads
            db: Database session
            
        Returns:
            List of conversation records
            
        Example attack payload:
            search_query = "1' OR '1'='1"
        """
        # VULNERABLE: Direct string concatenation into SQL query
        # This allows SQL injection attacks
        sql_query = f"SELECT * FROM conversations WHERE summary LIKE '%{search_query}%' OR feedback LIKE '%{search_query}%'"
        
        # Execute raw SQL query - VULNERABLE: SQL injection
        result = db.execute(sql_query)
        conversations = result.fetchall()
        
        # Convert to list of dictionaries
        conversation_list = []
        for conv in conversations:
            conversation_list.append({
                "id": conv.id if hasattr(conv, 'id') else None,
                "summary": conv.summary if hasattr(conv, 'summary') else None,
                "feedback": conv.feedback if hasattr(conv, 'feedback') else None,
                "timestamp": conv.timestamp if hasattr(conv, 'timestamp') else None,
                "warning": "VULNERABLE: SQL injection vulnerability detected"
            })
        
        return conversation_list
    
    def vulnerable_user_lookup(self, user_input: str, db: Session) -> List[Dict[str, Any]]:
        """
        VULNERABLE: User lookup with SQL injection vulnerability
        
        Args:
            user_input: User input that can contain SQL injection payloads
            db: Database session
            
        Returns:
            List of user records
        """
        # VULNERABLE: Direct string concatenation
        sql_query = f"SELECT * FROM users WHERE username = '{user_input}' OR email = '{user_input}'"
        
        result = db.execute(sql_query)
        users = result.fetchall()
        
        user_list = []
        for user in users:
            user_list.append({
                "id": user.id if hasattr(user, 'id') else None,
                "username": user.username if hasattr(user, 'username') else None,
                "email": user.email if hasattr(user, 'email') else None,
                "warning": "VULNERABLE: SQL injection vulnerability detected"
            })
        
        return user_list
    
    def vulnerable_order_search(self, search_term: str, db: Session) -> List[Dict[str, Any]]:
        """
        VULNERABLE: Order search with SQL injection vulnerability
        
        Args:
            search_term: Search term that can contain SQL injection payloads
            db: Database session
            
        Returns:
            List of order records
        """
        # VULNERABLE: Direct string concatenation
        sql_query = f"SELECT * FROM orders WHERE order_details LIKE '%{search_term}%' OR customer_name LIKE '%{search_term}%'"
        
        result = db.execute(sql_query)
        orders = result.fetchall()
        
        order_list = []
        for order in orders:
            order_list.append({
                "id": order.id if hasattr(order, 'id') else None,
                "order_details": order.order_details if hasattr(order, 'order_details') else None,
                "customer_name": order.customer_name if hasattr(order, 'customer_name') else None,
                "warning": "VULNERABLE: SQL injection vulnerability detected"
            })
        
        return order_list


# Global instance for easy import
sql_injection_vulnerability = SQLInjectionVulnerability()
